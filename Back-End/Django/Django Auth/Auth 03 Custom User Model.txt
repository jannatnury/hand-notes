*** Django Custom User Model:
	* Models.py:
	
		# imports
		from django.db import models
		from django.contrib.auth.models import AbstractBaseUser, BaseUserManager
		from django.contrib.auth import get_user_model

		# user manager:
		class UserManager(BaseUserManager):
			# create user
			def create_user(self, email, password=None):
				if not email:
					raise ValueError('Enter a valid email')

				user = self.model(email=self.normalize_email(email))
				user.set_password(password)
				user.save(using=self._db)
				return user

			# create staff user
			def create_staffuser(self, email, password=None):
				user = self.create_user(email, password)
				user.staff = True
				user.save(using=self._db)
				return user

			# create super user / admin
			def create_superuser(self, email, password=None):
				user = self.create_user(email, password)
				user.staff = True
				user.admin = True
				user.save(using=self._db)
				return user
				
				

		# user model:
		class User(AbstractBaseUser):
			genders = (
				('Male', 'Male'),
				('Female', 'Female'),
				('Others', 'Others'),
			)
			email = models.EmailField(max_length=245, unique=True)
			first_name = models.CharField(max_length=245)
			last_name = models.CharField(max_length=245)
			gender = models.CharField(max_length=245, choices=genders)
			timestamp = models.DateTimeField(auto_now_add=True)
			is_active = models.BooleanField(default=True)
			staff = models.BooleanField(default=False)
			admin = models.BooleanField(default=False)

			# username replaced with email
			USERNAME_FIELD = 'email'
			REQUIRED_FIELDS = []

			object = UserManager()

			def __str__(self):
				return self.email

			def has_perm(self, perm, obj=None):
				return True

			def has_module_perms(self, app_label):
				return True

			@property
			def is_staff(self):
				if self.staff == True:
					return True
				else:
					return False

			@property
			def is_superuser(self):
				if self.admin == True:
					return True
				else:
					return False



	* Forms.py:
	
		# imports
		from django import forms
		from django.contrib.auth import get_user_model
		from django.contrib.auth.forms import ReadOnlyPasswordHashField

		# user register form
		User = get_user_model()


		class RegisterForm(forms.ModelForm):
			# password input
			password = forms.CharField(widget=forms.PasswordInput())
			password2 = forms.CharField(
				widget=forms.PasswordInput(), label='Confirm Password')

			# selecting Model
			class Meta:
				model = User
				fields = [
					'email', 'first_name', 'last_name', 'gender'
				]

			# password matching and returning password
			def clean(self):
				cleaned_data = super().clean()
				password1 = cleaned_data.get('password')
				password2 = cleaned_data.get('password2')
				if password1 is not None and password1 != password2:
					self.add_error("password2", "Your passwords must match")

				return cleaned_data

			# set password
			def save(self, commit=True):

				user = super(RegisterForm, self).save(commit=False)
				user.set_password(self.cleaned_data['password2'])
				if commit:
					user.save()
				return user

		# super user crete form


		class UserAdminCreationForm(forms.ModelForm):
			# password input
			password = forms.CharField(widget=forms.PasswordInput())
			password2 = forms.CharField(
				widget=forms.PasswordInput(), label='Confirm Password')

			# selecting Model
			class Meta:
				model = User
				fields = ['email']

			# password matching and returning password
			def clean(self):
				cleaned_data = super().clean()
				password1 = cleaned_data.get('password')
				password2 = cleaned_data.get('password2')
				if password1 is not None and password1 != password2:
					self.add_error("password2", "Your passwords must match")

				return cleaned_data

			# set password
			def save(self, commit=True):

				user = super().save(commit=False)
				user.set_password(self.cleaned_data['password2'])
				if commit:
					user.save()
				return user


		# useradminchangeform
		class UserAdminChangeForm(forms.ModelForm):
			password = ReadOnlyPasswordHashField()

			class Meta:
				model = User
				fields = ['email', 'password', 'is_active', 'admin']

			def clean_password(self):
				# Regardless of what the user provides, return the initial value.
				# This is done here, rather than on the field, because the
				# field does not have access to the initial value
				return self.initial["password"]


	* admin.py:
	
	
		# imports
		from django.contrib import admin
		from .models import *
		from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
		from django.contrib.auth.models import Group
		from .forms import UserAdminCreationForm, UserAdminChangeForm

		# Register your models here.
		from django.contrib.auth import get_user_model
		User = get_user_model()

		# unregister group model
		admin.site.unregister(Group)


		@admin.register(User)
		class UserAdmin(BaseUserAdmin):
			# The forms to add and change user instances
			form = UserAdminChangeForm
			add_form = UserAdminCreationForm
			# The fields to be used in displaying the User model.
			# These override the definitions on the base UserAdmin
			# that reference specific fields on auth.User.
			list_display = ['email', 'first_name', 'last_name', 'admin']
			list_filter = ['admin']
			fieldsets = (
				(None, {'fields': ('email', 'password')}),
				('Personal info', {
				 'fields': ('first_name', 'last_name', 'gender')}),
				('Permissions', {'fields': ('staff', 'admin',)}),

			)
			# add_fieldsets is not a standard ModelAdmin attribute. UserAdmin
			# overrides get_fieldsets to use this attribute when creating a user.
			add_fieldsets = (
				(None, {
					'classes': ('wide',),
					'fields': ('email', 'first_name', 'last_name', 'gender', 'password', 'password2', 'staff', 'admin')}
				 ),
			)
			search_fields = ['email']
			ordering = ['email']
			filter_horizontal = ()

			class Meta:
				model = User
				fields = ['email']
				
				
	* Settings.py:
		# custom user model
		AUTH_USER_MODEL = 'accounts.User'
