*** Django rest api ****
*** Class based views ****
# imports 
from rest_framework.views import APIView

# Rest api
class ClassName(APIView):
    # get method
    def get(self, request,pk=None format=None):
        id = pk
        # single or multiple data list
        if id is not None:
            data = ModelName.objects.get(id=id)
            sr_data = NameSerializer(data)
                return Response(sr_data.data, status=status.HTTP_200_OK)

        data = ModelName.objects.all()
        sr_data = NameSerializer(data, many=True)
        return Response(sr_data.data, status=status.HTTP_200_OK)

    # post method
    def post(self, request, format=None):
        sr_data = NameSerializer(data=request.data)
        if sr_data.is_valid():
            sr_data.save()
            return Response('Data saved successfully', status=status.HTTP_201_CREATED)
        return Response(sr_data.errors,status=status.HTTP_400_BAD_REQUEST)

    # put method
    def put(self, request,pk=None, format=None):
        id = pk
        data = ModelName.objects.get(id=id)
        sr_data = NameSerializer(data, data=request.data)
        if sr_data.is_valid():
            sr_data.save()
            return Response('Data updated successfully', status=status.HTTP_200_OK)
        return Response(sr_data.errors,status=status.HTTP_400_BAD_REQUEST)

    # patch method
    def patch(self, request,pk=None, format=None):
        id = pk
        data = ModelName.objects.get(id=id)
        sr_data = NameSerializer(data, data=request.data, partial=True)
        if sr_data.is_valid():
            sr_data.save()
            return Response('Data updated successfully', status=status.HTTP_200_OK)
        return Response(sr_data.errors,status=status.HTTP_400_BAD_REQUEST)

    # delete method
    def delete(self, request, pk=None, format=None):
        id = pk
        data = ModelName.objects.get(id=id)
        data.delete()
        return Response('Data deleted successfully', status=status.HTTP_200_OK)