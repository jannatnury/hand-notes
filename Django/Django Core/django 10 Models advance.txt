*** Dajngo Models Advance:
	*** Models Inheritance:
		* Abstract Base class
		* Multi Table Inheritance
		* Proxy Models
		
	* Abstract Base Class:
		class ModelName(models.Model):
			name = models.FieldType()
			
			class Meta:
				abstract = True
				
		class ModelName(ModelName):
			name = models.FieldType()
			
	* Multi Table Inheritance:
		class ModelName(models.Model):
			name = models.FieldType()
			
		class ModelName(ModelName):
			name = models.FieldType()
			
	* Proxy Model:
		class ModelName(models.Model):
			name = models.FieldType()
			
		class ModelName(ModelName):
			class Meta:
				proxy = True
				
				
				
				
	*** Model Manager:
		class ModelName(models.Model):
			name = models.FieldType()
			
			objects = models.Manager() # Default
			name = ManagerName() # custom
			
		# custom model manager:
		class ManagerName(models.Manager):
			def get_queryset(self):
				return super().get_queryset().order_by('id')
				
				
	*** Models Relationship:
		* One To One Relationship
		* One To Many Relationship
		* Many To Many Relationship
		
	* One To One Relationship:
		*OneToOneField(ModelName, on_delete, **options)
	
	* One To Many Relationship:
		* Foreignkey(ModelName, on_delete, **options)
		
	* Many To Many Relationship:
		* ManyToManyField(ModelName, **options)
		
	*** On_delete = models.CASCADE/PROTECT/SET_NULL/SET_DEFAULT/DO_NOTHING